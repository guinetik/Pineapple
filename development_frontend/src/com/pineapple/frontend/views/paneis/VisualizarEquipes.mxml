<?xml version="1.0" encoding="utf-8"?>
<ui:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 title="Visualizar Equipes"
						 skinClass="com.pineapple.frontend.views.skins.ResizableTitleWindowSkin"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:ui="com.pineapple.frontend.views.ui.*"
						 width="900"
						 height="650"
						 initialize="onInit(event)"
						 close="onClose(event)"
						 xmlns:controllers="com.pineapple.business.controllers.*">
	<fx:Script>
		<![CDATA[
			import com.pineapple.business.AssetManager;
			import com.pineapple.business.events.DataReturnEvent;
			import com.pineapple.business.model.EquipeVO;
			import com.pineapple.business.model.ProjetoVO;
			import com.pineapple.business.repository.LoginRepository;
			import com.pineapple.frontend.PineappleFrontend;
			import com.pineapple.frontend.controllers.MenuController;
			import com.pineapple.frontend.views.paneis.CadastrarIdeia;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var equipes:ArrayCollection;
			
			protected function onInit(event:FlexEvent):void
			{
				
				CursorManager.setBusyCursor();
				controller.getEquipes();
				
			}
			
			public function hideCloseButton():void
			{
				
				this.closeButton.visible = false;
				this.resizeHandle.visible = false;
				
			}
			
			protected function onDataReturn(event:DataReturnEvent):void
			{
				
				CursorManager.removeBusyCursor();
				this.equipes=event.data;
				
			}
			
			protected function onClose(event:CloseEvent):void
			{
				
				PopUpManager.removePopUp(this);
				
			}
			
			protected function filtrarDados(event:MouseEvent):void
			{
				
				this.equipes.filterFunction = filterFirst;
				this.equipes.refresh();
				this.btLimparFiltros.includeInLayout = true;
				this.btLimparFiltros.visible = true;
				
			}
			
			private function filterFirst(item:Object):Boolean
			{
				
				var p:EquipeVO 				= item as EquipeVO;
				if(p.nome.match(new RegExp(txtFiltros.text, 'i')) || p.criador.match(new RegExp(txtFiltros.text, 'i')) || p.descricao.match(new RegExp(txtFiltros.text, 'i'))) return true;
				else return false;
				
			}
			
			protected function limparFiltros(event:MouseEvent):void
			{
				
				this.btLimparFiltros.includeInLayout = false;
				this.btLimparFiltros.visible = false;
				this.equipes.filterFunction = null;
				this.equipes.refresh();
				
			}
			
			protected function abrirEquipe(event:IndexChangeEvent):void
			{
				
				var c:MenuController = new MenuController();
				c.root = this.root;	
				c.visualizarEquipe(this.list.selectedItem);
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<controllers:ControladorEquipe id="controller"
									   data_return="onDataReturn(event)"/>
	</fx:Declarations>

	<ui:controlBarContent>

		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="Filtrar Equipes"/>
			<s:TextInput width="100%"
						 id="txtFiltros"/>
			<s:Button height="30"
					  label="Filtrar"
					  icon="{AssetManager.Search}"
					  click="filtrarDados(event)"/>
			<s:Button height="30"
					  label="Limpar Filtros"
					  includeInLayout="false"
					  visible="false"
					  id="btLimparFiltros"
					  click="limparFiltros(event)"/>
		</s:HGroup>

	</ui:controlBarContent>

	<s:List width="100%"
			height="100%"
			itemRenderer="com.pineapple.frontend.views.renderers.EquipeItemRenderer"
			id="list"
			labelField="nome"
			dataProvider="{equipes}"
			horizontalScrollPolicy="off"
			change="abrirEquipe(event)"
			borderVisible="false">
		<s:layout>
			<s:VerticalLayout gap="2"/>
		</s:layout>
	</s:List>

</ui:ResizableTitleWindow>
