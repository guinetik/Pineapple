<?xml version="1.0" encoding="utf-8"?>

<!--
FlexInc. 2012
http://www.loziosecchi.it/flex_inc
http://twitter.com//loziosecchi
-->

<!--- The default skin class for the anchor button on a Luna DropDownList component.  

@see spark.components.DropDownList        
@see spark.skins.spark.DropDownListSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.Button")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For dropDownList buttons, the graphics are colorized but the arrow is not. */
		static private const exclusions:Array = ["arrow"];
		
		/**
		 * @private
		 */  
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		static private const symbols:Array = ["arrowFill1", "arrowFill2"];
		
		/**
		 * @private
		 */
		override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				shadow.radiusX = cornerRadius;
				fill.radiusX = cornerRadius;
				border.radiusX = cornerRadius;
			}
			
			if (highlightStroke) highlightStroke.radiusX = cornerRadius;
			if (highlightdownstroke) highlightdownstroke.radiusX = cornerRadius;
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="disabled" />
	</s:states>
	
	<!-- layer 1: shadow -->
	<!--- @private -->
	<s:Rect id="shadow" left="-1" right="-1" top="-1" bottom="-1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF"
								 alpha="0.05"
								 alpha.down="0" />
				<s:GradientEntry color="0x000000" 
								 color.down="0xFFFFFF" 
								 alpha="0.1"
								 alpha.down="0.3" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 2: border fill -->
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="4">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000"
								 alpha=".2" alpha.down=".35"/>
				<s:GradientEntry color="0x000000"
								 alpha=".3" alpha.down=".25"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<!-- layer 3: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xf5f5f5" 
								 color.over="0xf7f7f7" 
								 color.down="0xbababa" />
				<s:GradientEntry color="0xdddddd" 
								 color.over="0xe5e5e5" 
								 color.down="0xd4d4d4" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 4: highlight stroke (all states except down) -->
	<!--- @private -->
	<s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" excludeFrom="down" radiusX="2">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0xffffff" alpha.over="0.8" />
				<s:GradientEntry color="0xdddddd" alpha.over="0.8" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 5: highlight stroke (down state only) -->
	<!--- @private -->
	<s:Rect id="highlightdownstroke" left="2" right="2" top="1" bottom="2" radiusX="2" includeIn="down">
		<s:stroke>
			<s:LinearGradientStroke rotation="90" weight="1">
				<s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0" />
				<s:GradientEntry color="0x000000" alpha="0.00" ratio="0.001" />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	<!-- layer 6: vertical line -->
	<!--- @private -->
	<s:Rect right="18" top="1" bottom="1" width="1">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000" 
								 alpha="0.35"/>
				<s:GradientEntry color="0x000000" 
								 alpha="0.45"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!-- layer 7: arrow -->
	<!--- The arrow graphic displayed in the anchor button. -->
	<s:Path right="6" verticalCenter="0" id="arrow"
			data="M 4.0 4.0 L 4.0 3.0 L 5.0 3.0 L 5.0 2.0 L 6.0 2.0 L 6.0 1.0 L 7.0 1.0 L 7.0 0.0 L 0.0 0.0 L 0.0 1.0 L 1.0 1.0 L 1.0 2.0 L 2.0 2.0 L 2.0 3.0 L 3.0 3.0 L 3.0 4.0 L 4.0 4.0">
		<s:fill>
			<s:RadialGradient rotation="90" focalPointRatio="1">   
				<!--- @private
				The first part of the arrow's gradient fill. 
				The default alpha is .6. The default color if 0x000000. -->
				<s:GradientEntry id="arrowFill1" color="0" alpha="0.6" />
				<!--- @private
				The second part of the arrow's gradient fill. 
				The default alpha is .6. The default color if 0x000000. -->
				<s:GradientEntry id="arrowFill2" color="0" alpha="0.8" />
			</s:RadialGradient>
		</s:fill>
	</s:Path>
</s:SparkSkin>
