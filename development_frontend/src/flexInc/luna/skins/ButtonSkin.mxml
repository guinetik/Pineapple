<?xml version="1.0" encoding="utf-8"?>

<!--
FlexInc. 2011
http://www.loziosecchi.it/flex_inc
http://twitter.com//loziosecchi
-->

<!--- The default skin class for the Luna Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
             xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
             minWidth="21" minHeight="21" 
             alpha.disabled="0.5">
     
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            import spark.components.Group;
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["labelDisplay"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
            
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                var cr:Number = getStyle("cornerRadius");
                
                if (cornerRadius != cr)
                {
                    cornerRadius = cr;
                    shadow.radiusX = cornerRadius;
                    fill.radiusX = cornerRadius;
                    border.radiusX = cornerRadius;
                }
                
                if (highlightStroke) highlightStroke.radiusX = cornerRadius;
                if (highlightDownStroke) highlightDownStroke.radiusX = cornerRadius;
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
            
            private var cornerRadius:Number = 4;
                                 
        ]]>        
    </fx:Script>
        
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    
    <!-- layer 1: shadow -->
    <!--- @private -->
    <s:Rect id="shadow" left="-1" right="-1" top="0" bottom="-1" radiusX="4" >
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0x000000" 
                                 color.down="0xFFFFFF"
                                 alpha="0.05"
                                 alpha.down="0" />
                <s:GradientEntry color="0x000000" 
                                 color.down="0xFFFFFF" 
                                 alpha="0.1"
                                 alpha.down="0.3" />
            </s:LinearGradient>
        </s:fill>
	</s:Rect>
    
    <!-- layer 2: border fill -->
    <!--- @private -->
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" radiusX="4">
        <s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x000000"
								 alpha=".2" alpha.down=".35"/>
				<s:GradientEntry color="0x000000"
								 alpha=".3" alpha.down=".25"/>
			</s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <!-- layer 3: fill -->
    <!--- @private -->
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="4">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0xf5f5f5" 
                                 color.over="0xf7f7f7" 
                                 color.down="0xbababa" />
                <s:GradientEntry color="0xdddddd" 
                                 color.over="0xe5e5e5" 
                                 color.down="0xd4d4d4" />
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <!-- layer 4: highlight stroke (all states except down) -->
    <!--- @private -->
    <s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" radiusX="4" excludeFrom="down">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0xffffff" alpha.over="0.8" />
                <s:GradientEntry color="0xdddddd" alpha.over="0.8" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
	<!-- layer 5: highlight stroke (down state only) -->
    <!--- @private -->
    <s:Rect id="highlightDownStroke" left="2" right="2" top="1" bottom="2" radiusX="4" includeIn="down">
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000" alpha="0.09" ratio="0.0" />
                <s:GradientEntry color="0x000000" alpha="0.00" ratio="0.001" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>

    <!-- layer 6: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay  -->
    <s:Label id="labelDisplay"
             textAlign="center"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1" verticalAlign="middle"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
